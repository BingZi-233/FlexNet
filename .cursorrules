# Nuxt.js 开发规范

## 重要说明
- 项目基于 Nuxt 3，使用 TypeScript 和 Arco Design UI 框架
- 请遵循 Vue 3 和 Nuxt 3 的最佳实践
- 项目使用 pnpm 进行依赖管理

## 技术栈

1. **核心技术**：
   - 基础框架：`Nuxt 3.16+`
   - UI 框架：`Arco Design Vue`
   - CSS 框架：`Tailwind CSS`
   - 状态管理：`VueUse` 和 Nuxt 内置的 `useState`
   - 后端服务：`Appwrite`
   - 工具库：
     - `lodash-es`
     - `vueuse/core`

2. **开发环境**：
   - 包管理器：`pnpm`
   - 代码提交：使用 Git 进行版本控制
   - 编码规范：UTF-8 编码

## 架构设计规范

1. **Nuxt 项目结构**：
   - `pages/`: 所有路由页面
   - `components/`: 可复用组件
   - `layouts/`: 页面布局
   - `composables/`: 组合式函数
   - `server/`: 服务器端 API 路由
   - `utils/`: 工具函数
   - `middleware/`: 路由中间件
   - `plugins/`: Vue 插件
   - `stores/`: 状态管理
   - `public/`: 静态资源

2. **开发原则**：
   - 遵循组件化开发原则
   - 使用组合式 API (Composition API)
   - 遵循 TypeScript 类型定义
   - 保持代码简洁清晰
   - 优先使用异步组件提高性能
   - 使用 SSR 友好的代码

## 代码实现规范

### 组件规范
- 使用 `<script setup lang="ts">` 风格
- 组件名使用 PascalCase 命名
- 组件文件名与组件名保持一致
- 使用 defineProps 和 defineEmits 定义属性和事件
- 示例：
  ```vue
  <script setup lang="ts">
  import { ref } from 'vue'
  
  // Props 定义
  const props = defineProps<{
    title: string
    items?: string[]
  }>()
  
  // Emits 定义
  const emit = defineEmits<{
    (e: 'update', value: string): void
    (e: 'delete'): void
  }>()
  
  // 响应式状态
  const count = ref(0)
  
  // 方法
  function increment() {
    count.value++
    emit('update', count.value.toString())
  }
  </script>
  
  <template>
    <div>
      <h2>{{ title }}</h2>
      <p>Count: {{ count }}</p>
      <button @click="increment">Increment</button>
      <ul v-if="items?.length">
        <li v-for="(item, index) in items" :key="index">
          {{ item }}
        </li>
      </ul>
    </div>
  </template>
  ```

### 路由页面规范
- 文件放置在 `pages/` 目录
- 文件名使用 kebab-case
- 嵌套路由使用目录结构
- 动态路由使用方括号命名：`[id].vue`
- 示例：
  ```
  pages/
  ├── index.vue               # 首页
  ├── about.vue               # 关于页面
  ├── users/
  │   ├── index.vue           # 用户列表页
  │   └── [id].vue            # 用户详情页
  └── posts/
      ├── index.vue           # 文章列表
      ├── [id].vue            # 文章详情
      └── [id]/comments.vue   # 文章评论
  ```

### 组合式函数规范
- 文件放置在 `composables/` 目录
- 文件名使用 camelCase 并加前缀 `use`
- 导出函数也使用 `use` 前缀
- 示例：
  ```ts
  // composables/useCounter.ts
  import { ref } from 'vue'
  
  export function useCounter(initialValue = 0) {
    const count = ref(initialValue)
    
    function increment() {
      count.value++
    }
    
    function decrement() {
      count.value--
    }
    
    return {
      count,
      increment,
      decrement
    }
  }
  ```

### 类型定义规范
- 类型定义放置在 `types/` 目录
- 每个模块的类型应该放在单独的文件中
- 类型名使用 PascalCase
- 接口名前缀使用 `I`
- 示例：
  ```ts
  // types/user.ts
  export interface IUser {
    id: string
    username: string
    email: string
    createdAt: Date
    role: UserRole
  }
  
  export enum UserRole {
    ADMIN = 'admin',
    USER = 'user',
    GUEST = 'guest'
  }
  
  export type UserWithoutEmail = Omit<IUser, 'email'>
  ```

### API 调用规范
- 服务器 API 放置在 `server/api/` 目录
- 使用 Nuxt 的 `useFetch` 或 `useAsyncData` 获取数据
- API 路由应该遵循 RESTful 设计
- 示例：
  ```ts
  // 在组件中使用
  const { data, pending, error, refresh } = await useFetch('/api/users')
  
  // 服务器 API 定义 (server/api/users.ts)
  export default defineEventHandler(async (event) => {
    // 处理请求并返回数据
    return {
      users: [/* 用户数据 */]
    }
  })
  ```

### Arco Design UI 规范
- 使用前缀 `A` 访问 Arco 组件
- 推荐样式导入方式：CSS
- 按需导入图标
- 示例：
  ```vue
  <template>
    <ALayout>
      <AHeader>Header</AHeader>
      <AContent>
        <ATable :columns="columns" :data="data" />
      </AContent>
      <AFooter>Footer</AFooter>
    </ALayout>
  </template>
  ```

### 异常处理规范
- 使用 try/catch 捕获异常
- 处理 API 请求错误并提供用户反馈
- 使用 Arco Design 的 Message 或 Notification 提示错误
- 示例：
  ```ts
  try {
    const result = await useFetch('/api/users')
    if (result.error.value) {
      throw new Error(result.error.value.message)
    }
    return result.data.value
  } catch (error) {
    Message.error(`获取用户列表失败: ${error.message}`)
    return []
  }
  ```

## 配置管理规范

### 环境变量规范
- 项目根目录使用 `.env` 文件
- 示例环境变量文件 `.env.example`
- 敏感配置不要提交到仓库
- 使用 `runtimeConfig` 访问环境变量
- 示例：
  ```ts
  // nuxt.config.ts 中定义
  export default defineNuxtConfig({
    runtimeConfig: {
      appwriteApiKey: process.env.APPWRITE_API_KEY,
      public: {
        appwriteEndpoint: process.env.APPWRITE_ENDPOINT,
        appwriteProjectId: process.env.APPWRITE_PROJECT_ID
      }
    }
  })
  
  // 组件中使用
  const config = useRuntimeConfig()
  console.log(config.public.appwriteEndpoint)
  ```

### Nuxt 配置规范
- 所有 Nuxt 配置集中在 `nuxt.config.ts`
- 模块和插件配置放在各自区域
- 不同环境使用不同配置
- 示例：
  ```ts
  export default defineNuxtConfig({
    // 模块配置
    modules: ['arco-design-nuxt-module', '@nuxtjs/tailwindcss'],
    
    // Arco Design 配置
    arco: {
      componentPrefix: 'A',
      importStyle: 'css',
      icons: ['IconUser', 'IconSettings']
    },
    
    // 应用配置
    app: {
      pageTransition: { name: 'page', mode: 'out-in' },
      head: {
        title: 'My Nuxt App',
        meta: [{ name: 'description', content: 'My amazing Nuxt application' }]
      }
    }
  })
  ```

## 性能优化规范

1. **资源优化**：
   - 使用异步组件 `defineAsyncComponent`
   - 图片懒加载
   - 使用合适的图片格式（WebP, AVIF）
   - CSS 和 JS 代码分割

2. **渲染优化**：
   - 使用 `<ClientOnly>` 包装仅客户端渲染的组件
   - 避免大型组件，拆分为更小的组件
   - 使用 `<Suspense>` 处理异步组件
   - 大列表使用虚拟滚动（如：vue-virtual-scroller）

3. **数据获取优化**：
   - 使用 `useAsyncData` 和 `useFetch` 的缓存功能
   - 避免重复请求相同数据
   - 合理设置数据刷新策略

## Appwrite 使用规范

1. **实例化 Appwrite**：
   ```ts
   import { Client, Account, Databases } from 'appwrite'
   
   export const useAppwrite = () => {
     const config = useRuntimeConfig()
     
     const client = new Client()
       .setEndpoint(config.public.appwriteEndpoint)
       .setProject(config.public.appwriteProjectId)
     
     const account = new Account(client)
     const databases = new Databases(client)
     
     return {
       client,
       account,
       databases
     }
   }
   ```

2. **数据操作**：
   - 使用 composables 封装 Appwrite 操作
   - 使用类型定义增强类型安全
   - 处理 Appwrite 错误并提供用户反馈
